from flask import Flask, render_template, request
import numpy as np
import pandas as pd
import joblib
import google.generativeai as genai
import logging

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

class HeartDiseaseAdviser:
    def __init__(self):
        # T·∫£i model v√† pipeline ƒë√£ train
        self.process_pipeline = joblib.load('process_pipeline.pkl')
        self.model = joblib.load('heart_disease_model (2).pkl')
        # C·∫•u h√¨nh Gemini API
        genai.configure(api_key="AIzaSyDWHxXDRmdYt1nKoXHa4VNCjiBskRIv2RE")
    
    
    def predict(self, X):
        weights = self.model.get('weights')
        bias = self.model.get('bias', 0)
        # Th·ª±c hi·ªán d·ª± ƒëo√°n th·ªß c√¥ng
        X = np.array(X)
        z = np.dot(X, weights) + bias
        predictions = (self.sigmoid(z) >= 0.5).astype(int)
        return predictions

    def sigmoid(self, z):
        return 1 / (1 + np.exp(-z))

    def get_prediction_result(self, prediction):
        if prediction == 1:
            return "‚ö†Ô∏è B·ªánh nh√¢n c√≥ kh·∫£ nƒÉng m·∫Øc b·ªánh tim."
        else:
            return "‚úÖ B·ªánh nh√¢n kh√¥ng m·∫Øc b·ªánh tim."

    def get_advice_with_gemini(self, user_data, prediction):
        try:
            # C·∫•u h√¨nh model
            model = genai.GenerativeModel('gemini-1.0-pro')

            prompt = f"""
            L√† m·ªôt b√°c sƒ© chuy√™n khoa tim m·∫°ch, h√£y ph√¢n t√≠ch v√† t∆∞ v·∫•n cho b·ªánh nh√¢n v·ªõi c√°c ch·ªâ s·ªë:
            
            TH√îNG TIN B·ªÜNH NH√ÇN:
            - Tu·ªïi: {user_data['age'][0]} tu·ªïi
            - Huy·∫øt √°p: {user_data['trestbps'][0]} mmHg
            - Cholesterol: {user_data['chol'][0]} mg/dl
            - Nh·ªãp tim: {user_data['thalach'][0]}
            
            K·∫øt qu·∫£ d·ª± ƒëo√°n: {"C√≥" if prediction == 1 else "Kh√¥ng"} nguy c∆° m·∫Øc b·ªánh tim.
            
            H√£y ƒë∆∞a ra:
            1. Ph√¢n t√≠ch chi ti·∫øt t·ª´ng ch·ªâ s·ªë
            2. ƒê√°nh gi√° m·ª©c ƒë·ªô nguy c∆°
            3. L·ªùi khuy√™n c·ª• th·ªÉ v·ªÅ ch·∫ø ƒë·ªô ƒÉn u·ªëng v√† sinh ho·∫°t
            4. C√°c b∆∞·ªõc c·∫ßn th·ª±c hi·ªán ti·∫øp theo
            
            Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, s·ª≠ d·ª•ng emoji ph√π h·ª£p.
            """

            # G·ªçi API ƒë·ªÉ t·∫°o n·ªôi dung
            response = model.generate_content(prompt)
            logging.info(f"Ph·∫£n h·ªìi API: {response}")

            return response.text if response.text else self.get_fallback_advice(prediction)

        except Exception as e:
            logging.error(f"L·ªói khi g·ªçi API Gemini: {str(e)}")
            return self.get_fallback_advice(prediction)

    def get_advice(self, user_data, prediction):
        """H√†m ch√≠nh ƒë·ªÉ l·∫•y l·ªùi khuy√™n"""
        return self.get_advice_with_gemini(user_data, prediction)

    def get_fallback_advice(self, prediction):
        """L·ªùi khuy√™n d·ª± ph√≤ng khi API l·ªói"""
        if prediction == 1:
            return """
            ‚ö†Ô∏è C·∫¢NH B√ÅO: C√≥ nguy c∆° m·∫Øc b·ªánh tim

            üìå NH·ªÆNG VI·ªÜC C·∫¶N L√ÄM NGAY:
            1. ƒê·∫∑t l·ªãch kh√°m chuy√™n khoa tim m·∫°ch c√†ng s·ªõm c√†ng t·ªët
            2. Chu·∫©n b·ªã ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ ti·ªÅn s·ª≠ b·ªánh
            3. Th·ª±c hi·ªán ƒë·∫ßy ƒë·ªß c√°c x√©t nghi·ªám theo ch·ªâ ƒë·ªãnh

            üíä CH·∫æ ƒê·ªò SINH HO·∫†T:
            1. ƒÇn u·ªëng:
               - Gi·∫£m mu·ªëi xu·ªëng d∆∞·ªõi 5g/ng√†y
               - H·∫°n ch·∫ø ch·∫•t b√©o b√£o h√≤a
               - TƒÉng rau xanh v√† tr√°i c√¢y
               - U·ªëng ƒë·ªß n∆∞·ªõc (2-3 l√≠t/ng√†y)

            2. V·∫≠n ƒë·ªông:
               - T·∫≠p th·ªÉ d·ª•c nh·∫π nh√†ng 30 ph√∫t/ng√†y
               - Tr√°nh v·∫≠n ƒë·ªông m·∫°nh
               - Ngh·ªâ ng∆°i khi m·ªát

            3. Theo d√µi:
               - ƒêo huy·∫øt √°p m·ªói ng√†y
               - Ghi ch√©p c√°c tri·ªáu ch·ª©ng b·∫•t th∆∞·ªùng
               - Mang theo thu·ªëc c·∫•p c·ª©u n·∫øu ƒë∆∞·ª£c k√™
            """
        else:
            return """
            ‚úÖ K·∫æT QU·∫¢ T·ªêT: C√°c ch·ªâ s·ªë trong ng∆∞·ª°ng an to√†n

            üìã KHUY·∫æN NGH·ªä DUY TR√å:
            1. Ch·∫ø ƒë·ªô ƒÉn u·ªëng l√†nh m·∫°nh:
               - ƒêa d·∫°ng th·ª±c ph·∫©m
               - ∆Øu ti√™n rau xanh v√† tr√°i c√¢y
               - H·∫°n ch·∫ø ƒë·ªì ƒÉn nhanh
               - Gi·∫£m mu·ªëi v√† ƒë∆∞·ªùng

            2. V·∫≠n ƒë·ªông ƒë·ªÅu ƒë·∫∑n:
               - T·∫≠p th·ªÉ d·ª•c 30-45 ph√∫t/ng√†y
               - ƒêi b·ªô 10.000 b∆∞·ªõc m·ªói ng√†y
               - Tham gia c√°c ho·∫°t ƒë·ªông th·ªÉ thao nh·∫π nh√†ng

            3. Theo d√µi s·ª©c kh·ªèe:
               - Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ 6 th√°ng/l·∫ßn
               - Ki·ªÉm tra huy·∫øt √°p ƒë·ªãnh k·ª≥
               - Duy tr√¨ c√¢n n·∫∑ng h·ª£p l√Ω
            """

    def format_advice(self, advice_text):
        """ƒê·ªãnh d·∫°ng l·ªùi khuy√™n ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n"""
        # Th√™m emoji v√†o c√°c ti√™u ƒë·ªÅ
        advice_text = advice_text.replace('1. Ph√¢n t√≠ch', 'üìä 1. Ph√¢n t√≠ch')
        advice_text = advice_text.replace('2. ƒê√°nh gi√°', '‚ö†Ô∏è 2. ƒê√°nh gi√°')
        advice_text = advice_text.replace('3. L·ªùi khuy√™n', 'üí° 3. L·ªùi khuy√™n')
        advice_text = advice_text.replace('4. C√°c b∆∞·ªõc', 'üìã 4. C√°c b∆∞·ªõc')
        
        return advice_text

    def format_advice_data(self, user_data, advice_text):
        """Format d·ªØ li·ªáu l·ªùi khuy√™n th√†nh c√°c ph·∫ßn ri√™ng bi·ªát"""
        # Ph√¢n t√≠ch c√°c ch·ªâ s·ªë
        age = user_data['age'][0]
        age_comment = "L√† y·∫øu t·ªë nguy c∆° cao m·∫Øc b·ªánh tim." if age > 55 else "Trong ƒë·ªô tu·ªïi c·∫ßn theo d√µi s·ª©c kh·ªèe tim m·∫°ch."

        bp = user_data['trestbps'][0]
        bp_comment = "B√¨nh th∆∞·ªùng, n·∫±m trong ng∆∞·ª°ng 120/80 mmHg." if bp < 120 else "Cao h∆°n m·ª©c b√¨nh th∆∞·ªùng, c·∫ßn theo d√µi."

        chol = user_data['chol'][0]
        chol_comment = "Cao, tr√™n m·ª©c khuy·∫øn ngh·ªã l√† d∆∞·ªõi 200 mg/dl." if chol >= 200 else "Trong ng∆∞·ª°ng b√¨nh th∆∞·ªùng."

        heart_rate = user_data['thalach'][0]
        heart_rate_comment = "Nh·ªãp tim cao, c√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa b·ªánh tim m·∫°ch." if heart_rate > 100 else "Nh·ªãp tim trong ng∆∞·ª°ng b√¨nh th∆∞·ªùng."

        # ƒê√°nh gi√° nguy c∆°
        risk_factors = []
        if age > 55: risk_factors.append("tu·ªïi cao")
        if bp >= 120: risk_factors.append("huy·∫øt √°p cao")
        if chol >= 200: risk_factors.append("cholesterol cao")
        if heart_rate > 100: risk_factors.append("nh·ªãp tim nhanh")
        
        risk_assessment = f"D·ª±a tr√™n c√°c y·∫øu t·ªë nguy c∆° ({', '.join(risk_factors)}), b·ªánh nh√¢n c√≥ m·ª©c ƒë·ªô nguy c∆° trung b√¨nh m·∫Øc b·ªánh tim."

        return {
            'age_comment': age_comment,
            'bp_comment': bp_comment,
            'chol_comment': chol_comment,
            'heart_rate_comment': heart_rate_comment,
            'risk_assessment': risk_assessment,
            'recommendations': advice_text,  # Ph·∫ßn l·ªùi khuy√™n t·ª´ AI
            'next_steps': """
            <ul>
                <li>Theo d√µi th∆∞·ªùng xuy√™n huy·∫øt √°p v√† nh·ªãp tim</li>
                <li>T√°i kh√°m ƒë·ªãnh k·ª≥ m·ªói 3-6 th√°ng</li>
                <li>Th·ª±c hi·ªán c√°c x√©t nghi·ªám theo ch·ªâ ƒë·ªãnh c·ªßa b√°c sƒ©</li>
                <li>Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh</li>
            </ul>
            """
        }

# Kh·ªüi t·∫°o adviser
adviser = HeartDiseaseAdviser()

@app.route('/', methods=['GET', 'POST'])
def index():
    prediction = None
    prediction_text = None
    advice = None
    
    if request.method == 'POST':
        try:
            user_data = {
                'age': [int(request.form['age'])],
                'sex': [int(request.form['sex'])],
                'trestbps': [int(request.form['trestbps'])],
                'chol': [int(request.form['chol'])],
                'thalach': [int(request.form['thalach'])],
                'oldpeak': [float(request.form['oldpeak'])],
                'cp': [int(request.form['cp'])],
                'slope': [int(request.form['slope'])],
                'thal': [int(request.form['thal'])],
                'ca': [int(request.form['ca'])],
                'exang': [int(request.form['exang'])],
                'restecg': [int(request.form['restecg'])],
                'fbs': [int(request.form['fbs'])]
            }

            df = pd.DataFrame(user_data)
            processed_data = adviser.process_pipeline.transform(df)
            prediction = adviser.predict(processed_data)[0]
            
            # L·∫•y k·∫øt qu·∫£ d·ª± ƒëo√°n d·∫°ng text
            prediction_text = adviser.get_prediction_result(prediction)
            
            # L·∫•y l·ªùi khuy√™n
            advice = adviser.format_advice(adviser.get_advice(user_data, prediction))
            advice_data = adviser.format_advice_data(user_data, advice)

            return render_template('index.html', 
                                prediction=prediction,
                                prediction_text=prediction_text,
                                user_data=user_data,
                                **advice_data)

        except Exception as e:
            return f"C√≥ l·ªói x·∫£y ra: {str(e)}"

    return render_template('index.html', 
                         prediction=prediction,
                         prediction_text=prediction_text, 
                         advice=advice)

if __name__ == "__main__":
    app.run(debug=True)
